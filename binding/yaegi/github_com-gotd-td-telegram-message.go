// Code generated by 'yaegi extract github.com/gotd/td/telegram/message'. DO NOT EDIT.

package yaegi

import (
	"context"
	"github.com/gotd/td/telegram/message"
	"github.com/gotd/td/telegram/uploader"
	"github.com/gotd/td/telegram/uploader/source"
	"github.com/gotd/td/tg"
	"go/constant"
	"go/token"
	"io"
	"io/fs"
	"reflect"
)

func init() {
	Symbols["github.com/gotd/td/telegram/message/message"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Audio":              reflect.ValueOf(message.Audio),
		"Basketball":         reflect.ValueOf(message.Basketball),
		"BasketballEmoticon": reflect.ValueOf(constant.MakeFromLiteral("\"üèÄ\"", token.STRING, 0)),
		"Bowling":            reflect.ValueOf(message.Bowling),
		"BowlingEmoticon":    reflect.ValueOf(constant.MakeFromLiteral("\"üé≥\"", token.STRING, 0)),
		"Casino":             reflect.ValueOf(message.Casino),
		"CasinoEmoticon":     reflect.ValueOf(constant.MakeFromLiteral("\"üé∞\"", token.STRING, 0)),
		"Contact":            reflect.ValueOf(message.Contact),
		"CorrectPollAnswer":  reflect.ValueOf(message.CorrectPollAnswer),
		"Darts":              reflect.ValueOf(message.Darts),
		"DartsEmoticon":      reflect.ValueOf(constant.MakeFromLiteral("\"üéØ\"", token.STRING, 0)),
		"DefaultAudioMIME":   reflect.ValueOf(constant.MakeFromLiteral("\"audio/mp3\"", token.STRING, 0)),
		"DefaultGifMIME":     reflect.ValueOf(constant.MakeFromLiteral("\"image/gif\"", token.STRING, 0)),
		"DefaultStickerMIME": reflect.ValueOf(constant.MakeFromLiteral("\"image/webp\"", token.STRING, 0)),
		"DefaultVideoMIME":   reflect.ValueOf(constant.MakeFromLiteral("\"video/mp4\"", token.STRING, 0)),
		"DefaultVoiceMIME":   reflect.ValueOf(constant.MakeFromLiteral("\"audio/ogg\"", token.STRING, 0)),
		"Dice":               reflect.ValueOf(message.Dice),
		"DiceEmoticon":       reflect.ValueOf(constant.MakeFromLiteral("\"üé≤\"", token.STRING, 0)),
		"Document":           reflect.ValueOf(message.Document),
		"DocumentByHash":     reflect.ValueOf(message.DocumentByHash),
		"DocumentExternal":   reflect.ValueOf(message.DocumentExternal),
		"File":               reflect.ValueOf(message.File),
		"Football":           reflect.ValueOf(message.Football),
		"FootballEmoticon":   reflect.ValueOf(constant.MakeFromLiteral("\"‚öΩ\"", token.STRING, 0)),
		"ForceMulti":         reflect.ValueOf(message.ForceMulti),
		"FromBytes":          reflect.ValueOf(message.FromBytes),
		"FromFS":             reflect.ValueOf(message.FromFS),
		"FromFile":           reflect.ValueOf(message.FromFile),
		"FromPath":           reflect.ValueOf(message.FromPath),
		"FromReader":         reflect.ValueOf(message.FromReader),
		"FromSource":         reflect.ValueOf(message.FromSource),
		"FromURL":            reflect.ValueOf(message.FromURL),
		"GIF":                reflect.ValueOf(message.GIF),
		"Game":               reflect.ValueOf(message.Game),
		"GeoPoint":           reflect.ValueOf(message.GeoPoint),
		"Media":              reflect.ValueOf(message.Media),
		"MediaDice":          reflect.ValueOf(message.MediaDice),
		"NewSender":          reflect.ValueOf(message.NewSender),
		"Photo":              reflect.ValueOf(message.Photo),
		"PhotoExternal":      reflect.ValueOf(message.PhotoExternal),
		"Poll":               reflect.ValueOf(message.Poll),
		"PollAnswer":         reflect.ValueOf(message.PollAnswer),
		"RawPollAnswer":      reflect.ValueOf(message.RawPollAnswer),
		"RoundVideo":         reflect.ValueOf(message.RoundVideo),
		"StartBotInputUser":  reflect.ValueOf(message.StartBotInputUser),
		"StartBotParam":      reflect.ValueOf(message.StartBotParam),
		"Upload":             reflect.ValueOf(message.Upload),
		"UploadedDocument":   reflect.ValueOf(message.UploadedDocument),
		"UploadedPhoto":      reflect.ValueOf(message.UploadedPhoto),
		"UploadedSticker":    reflect.ValueOf(message.UploadedSticker),
		"Video":              reflect.ValueOf(message.Video),
		"Voice":              reflect.ValueOf(message.Voice),

		// type definitions
		"AnswerableMessageUpdate": reflect.ValueOf((*message.AnswerableMessageUpdate)(nil)),
		"AudioDocumentBuilder":    reflect.ValueOf((*message.AudioDocumentBuilder)(nil)),
		"Builder":                 reflect.ValueOf((*message.Builder)(nil)),
		"DeleteBuilder":           reflect.ValueOf((*message.DeleteBuilder)(nil)),
		"DocumentBuilder":         reflect.ValueOf((*message.DocumentBuilder)(nil)),
		"DocumentExternalBuilder": reflect.ValueOf((*message.DocumentExternalBuilder)(nil)),
		"EditMessageBuilder":      reflect.ValueOf((*message.EditMessageBuilder)(nil)),
		"FileLocation":            reflect.ValueOf((*message.FileLocation)(nil)),
		"FilePromise":             reflect.ValueOf((*message.FilePromise)(nil)),
		"ForwardBuilder":          reflect.ValueOf((*message.ForwardBuilder)(nil)),
		"InlineUpdate":            reflect.ValueOf((*message.InlineUpdate)(nil)),
		"MediaOption":             reflect.ValueOf((*message.MediaOption)(nil)),
		"MultiMediaOption":        reflect.ValueOf((*message.MultiMediaOption)(nil)),
		"PeerUpdate":              reflect.ValueOf((*message.PeerUpdate)(nil)),
		"PhotoBuilder":            reflect.ValueOf((*message.PhotoBuilder)(nil)),
		"PhotoExternalBuilder":    reflect.ValueOf((*message.PhotoExternalBuilder)(nil)),
		"PollAnswerOption":        reflect.ValueOf((*message.PollAnswerOption)(nil)),
		"PollBuilder":             reflect.ValueOf((*message.PollBuilder)(nil)),
		"ReportBuilder":           reflect.ValueOf((*message.ReportBuilder)(nil)),
		"RequestBuilder":          reflect.ValueOf((*message.RequestBuilder)(nil)),
		"RevokeBuilder":           reflect.ValueOf((*message.RevokeBuilder)(nil)),
		"ScheduledManager":        reflect.ValueOf((*message.ScheduledManager)(nil)),
		"SearchDocumentBuilder":   reflect.ValueOf((*message.SearchDocumentBuilder)(nil)),
		"Sender":                  reflect.ValueOf((*message.Sender)(nil)),
		"StartBotOption":          reflect.ValueOf((*message.StartBotOption)(nil)),
		"StyledTextOption":        reflect.ValueOf((*message.StyledTextOption)(nil)),
		"TypingActionBuilder":     reflect.ValueOf((*message.TypingActionBuilder)(nil)),
		"UploadBuilder":           reflect.ValueOf((*message.UploadBuilder)(nil)),
		"UploadOption":            reflect.ValueOf((*message.UploadOption)(nil)),
		"UploadedDocumentBuilder": reflect.ValueOf((*message.UploadedDocumentBuilder)(nil)),
		"UploadedPhotoBuilder":    reflect.ValueOf((*message.UploadedPhotoBuilder)(nil)),
		"UploadedStickerBuilder":  reflect.ValueOf((*message.UploadedStickerBuilder)(nil)),
		"Uploader":                reflect.ValueOf((*message.Uploader)(nil)),
		"VideoDocumentBuilder":    reflect.ValueOf((*message.VideoDocumentBuilder)(nil)),

		// interface wrapper definitions
		"_AnswerableMessageUpdate": reflect.ValueOf((*_github_com_gotd_td_telegram_message_AnswerableMessageUpdate)(nil)),
		"_FileLocation":            reflect.ValueOf((*_github_com_gotd_td_telegram_message_FileLocation)(nil)),
		"_InlineUpdate":            reflect.ValueOf((*_github_com_gotd_td_telegram_message_InlineUpdate)(nil)),
		"_MediaOption":             reflect.ValueOf((*_github_com_gotd_td_telegram_message_MediaOption)(nil)),
		"_MultiMediaOption":        reflect.ValueOf((*_github_com_gotd_td_telegram_message_MultiMediaOption)(nil)),
		"_PeerUpdate":              reflect.ValueOf((*_github_com_gotd_td_telegram_message_PeerUpdate)(nil)),
		"_UploadOption":            reflect.ValueOf((*_github_com_gotd_td_telegram_message_UploadOption)(nil)),
		"_Uploader":                reflect.ValueOf((*_github_com_gotd_td_telegram_message_Uploader)(nil)),
	}
}

// _github_com_gotd_td_telegram_message_AnswerableMessageUpdate is an interface wrapper for AnswerableMessageUpdate type
type _github_com_gotd_td_telegram_message_AnswerableMessageUpdate struct {
	WGetMessage func() tg.MessageClass
}

func (W _github_com_gotd_td_telegram_message_AnswerableMessageUpdate) GetMessage() tg.MessageClass {
	return W.WGetMessage()
}

// _github_com_gotd_td_telegram_message_FileLocation is an interface wrapper for FileLocation type
type _github_com_gotd_td_telegram_message_FileLocation struct {
	WGetAccessHash    func() (value int64)
	WGetFileReference func() (value []byte)
	WGetID            func() (value int64)
}

func (W _github_com_gotd_td_telegram_message_FileLocation) GetAccessHash() (value int64) {
	return W.WGetAccessHash()
}
func (W _github_com_gotd_td_telegram_message_FileLocation) GetFileReference() (value []byte) {
	return W.WGetFileReference()
}
func (W _github_com_gotd_td_telegram_message_FileLocation) GetID() (value int64) { return W.WGetID() }

// _github_com_gotd_td_telegram_message_InlineUpdate is an interface wrapper for InlineUpdate type
type _github_com_gotd_td_telegram_message_InlineUpdate struct {
	WGetQueryID func() int64
}

func (W _github_com_gotd_td_telegram_message_InlineUpdate) GetQueryID() int64 { return W.WGetQueryID() }

// _github_com_gotd_td_telegram_message_MediaOption is an interface wrapper for MediaOption type
type _github_com_gotd_td_telegram_message_MediaOption struct {
}

// _github_com_gotd_td_telegram_message_MultiMediaOption is an interface wrapper for MultiMediaOption type
type _github_com_gotd_td_telegram_message_MultiMediaOption struct {
}

// _github_com_gotd_td_telegram_message_PeerUpdate is an interface wrapper for PeerUpdate type
type _github_com_gotd_td_telegram_message_PeerUpdate struct {
	WGetPeer func() tg.PeerClass
}

func (W _github_com_gotd_td_telegram_message_PeerUpdate) GetPeer() tg.PeerClass { return W.WGetPeer() }

// _github_com_gotd_td_telegram_message_UploadOption is an interface wrapper for UploadOption type
type _github_com_gotd_td_telegram_message_UploadOption struct {
}

// _github_com_gotd_td_telegram_message_Uploader is an interface wrapper for Uploader type
type _github_com_gotd_td_telegram_message_Uploader struct {
	WFromBytes  func(ctx context.Context, name string, b []byte) (tg.InputFileClass, error)
	WFromFS     func(ctx context.Context, filesystem fs.FS, path string) (tg.InputFileClass, error)
	WFromFile   func(ctx context.Context, f uploader.File) (tg.InputFileClass, error)
	WFromPath   func(ctx context.Context, path string) (tg.InputFileClass, error)
	WFromReader func(ctx context.Context, name string, f io.Reader) (tg.InputFileClass, error)
	WFromSource func(ctx context.Context, src source.Source, rawURL string) (tg.InputFileClass, error)
	WFromURL    func(ctx context.Context, rawURL string) (tg.InputFileClass, error)
}

func (W _github_com_gotd_td_telegram_message_Uploader) FromBytes(ctx context.Context, name string, b []byte) (tg.InputFileClass, error) {
	return W.WFromBytes(ctx, name, b)
}
func (W _github_com_gotd_td_telegram_message_Uploader) FromFS(ctx context.Context, filesystem fs.FS, path string) (tg.InputFileClass, error) {
	return W.WFromFS(ctx, filesystem, path)
}
func (W _github_com_gotd_td_telegram_message_Uploader) FromFile(ctx context.Context, f uploader.File) (tg.InputFileClass, error) {
	return W.WFromFile(ctx, f)
}
func (W _github_com_gotd_td_telegram_message_Uploader) FromPath(ctx context.Context, path string) (tg.InputFileClass, error) {
	return W.WFromPath(ctx, path)
}
func (W _github_com_gotd_td_telegram_message_Uploader) FromReader(ctx context.Context, name string, f io.Reader) (tg.InputFileClass, error) {
	return W.WFromReader(ctx, name, f)
}
func (W _github_com_gotd_td_telegram_message_Uploader) FromSource(ctx context.Context, src source.Source, rawURL string) (tg.InputFileClass, error) {
	return W.WFromSource(ctx, src, rawURL)
}
func (W _github_com_gotd_td_telegram_message_Uploader) FromURL(ctx context.Context, rawURL string) (tg.InputFileClass, error) {
	return W.WFromURL(ctx, rawURL)
}
