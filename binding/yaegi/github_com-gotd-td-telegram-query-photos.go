// Code generated by 'yaegi extract github.com/gotd/td/telegram/query/photos'. DO NOT EDIT.

package yaegi

import (
	"context"
	"github.com/gotd/td/telegram/query/photos"
	"github.com/gotd/td/tg"
	"reflect"
)

func init() {
	Symbols["github.com/gotd/td/telegram/query/photos/photos"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewIterator":     reflect.ValueOf(photos.NewIterator),
		"NewQueryBuilder": reflect.ValueOf(photos.NewQueryBuilder),

		// type definitions
		"Elem":                      reflect.ValueOf((*photos.Elem)(nil)),
		"GetUserPhotosQueryBuilder": reflect.ValueOf((*photos.GetUserPhotosQueryBuilder)(nil)),
		"Iterator":                  reflect.ValueOf((*photos.Iterator)(nil)),
		"Query":                     reflect.ValueOf((*photos.Query)(nil)),
		"QueryBuilder":              reflect.ValueOf((*photos.QueryBuilder)(nil)),
		"QueryFunc":                 reflect.ValueOf((*photos.QueryFunc)(nil)),
		"Request":                   reflect.ValueOf((*photos.Request)(nil)),

		// interface wrapper definitions
		"_Query": reflect.ValueOf((*_github_com_gotd_td_telegram_query_photos_Query)(nil)),
	}
}

// _github_com_gotd_td_telegram_query_photos_Query is an interface wrapper for Query type
type _github_com_gotd_td_telegram_query_photos_Query struct {
	WQuery func(ctx context.Context, req photos.Request) (tg.PhotosPhotosClass, error)
}

func (W _github_com_gotd_td_telegram_query_photos_Query) Query(ctx context.Context, req photos.Request) (tg.PhotosPhotosClass, error) {
	return W.WQuery(ctx, req)
}
