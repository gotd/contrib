// Code generated by 'yaegi extract github.com/gotd/td/telegram/query/contacts/blocked'. DO NOT EDIT.

package yaegi

import (
	"context"
	"github.com/gotd/td/telegram/query/contacts/blocked"
	"github.com/gotd/td/tg"
	"reflect"
)

func init() {
	Symbols["github.com/gotd/td/telegram/query/contacts/blocked/blocked"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewIterator":     reflect.ValueOf(blocked.NewIterator),
		"NewQueryBuilder": reflect.ValueOf(blocked.NewQueryBuilder),

		// type definitions
		"Elem":                   reflect.ValueOf((*blocked.Elem)(nil)),
		"GetBlockedQueryBuilder": reflect.ValueOf((*blocked.GetBlockedQueryBuilder)(nil)),
		"Iterator":               reflect.ValueOf((*blocked.Iterator)(nil)),
		"Query":                  reflect.ValueOf((*blocked.Query)(nil)),
		"QueryBuilder":           reflect.ValueOf((*blocked.QueryBuilder)(nil)),
		"QueryFunc":              reflect.ValueOf((*blocked.QueryFunc)(nil)),
		"Request":                reflect.ValueOf((*blocked.Request)(nil)),

		// interface wrapper definitions
		"_Query": reflect.ValueOf((*_github_com_gotd_td_telegram_query_contacts_blocked_Query)(nil)),
	}
}

// _github_com_gotd_td_telegram_query_contacts_blocked_Query is an interface wrapper for Query type
type _github_com_gotd_td_telegram_query_contacts_blocked_Query struct {
	WQuery func(ctx context.Context, req blocked.Request) (tg.ContactsBlockedClass, error)
}

func (W _github_com_gotd_td_telegram_query_contacts_blocked_Query) Query(ctx context.Context, req blocked.Request) (tg.ContactsBlockedClass, error) {
	return W.WQuery(ctx, req)
}
